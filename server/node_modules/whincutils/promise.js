var Promise		= require('promise');
var bunyan		= require('bunyan')

var Py			= require('pythonify');

var log			= bunyan.createLogger({
    name: "Pythonify",
    level: 'trace'
});

Promise.sequence	= function(list) {
    if (Py.type(list) !== 'Array' && Py.len(list))
	throw Error("First argument must be an array of functions");

    var result;
    var i		= 0;
    var fn		= list[i];

    return new Promise(function(f,r) {
	function loop(fn, i, d) {
	    if (fn === undefined)
		return Promise.resolve(d);
	    
	    if (Py.type(fn) !== 'Function')
		throw Error("Index "+i+" of array is not a function.  Found type: "+Py.type(fn));
	    
	    var P	= fn(d);
	    if( P.then === undefined )
		throw Error("Result of function at index "+i+" is not a Promise.  Found type: "+Py.type(P));
	    
	    return P.then(function next(d) {
		var _i		= i+1;
		var fn		= list[_i];
		return loop(fn, _i, d);
	    }, r);
	}
	loop(fn, i).then(f,r);
    });
}

module.exports	= Promise;
