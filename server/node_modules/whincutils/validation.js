
var bunyan		= require('bunyan')
var log			= bunyan.createLogger({
    name: "Validation",
    level: 'debug'
});

var Validation	= {
    isInteger: function(args, _, validate) {
	var data		= this.args;
	var v			= args[0];
	var strict		= args[1];
	if (v === undefined && strict === false)
	    return validate(true);
	if ( v === '' || (isNaN(v) && parseInt(v) != v) )
	    return validate("Expecting integer, given value '"+v+"' is of type "+(typeof v));
	return validate(true);
    },
    exists: function(args, _, validate) {
	this.args.db(args[0]).where(args[1], args[2]).then(function(rows) {
	    if (rows !== undefined && rows.length > 0)
		validate(true);
	    else
		validate({
		    "error": "Failed Validation",
		    "message": "Requested data does not exists"
		})
	});
    },
    required: function(args, _, validate) {
	var v		= args[0];
	validate( (v !== null && v !== undefined) || {
	    "error": "Missing Data",
	    "message": args[1]+" is required"
	});
    },
    notEmpty: function(args, _, validate) {
	var v		= args[0];
	if( v === null || v === undefined
	    || v === "" || v.length === 0 )
	    validate({
		"error": "Missing Data",
		"message": args[1]+" cannot be empty or a blank string"
	    });
	else
	    validate(true);
    },
    requiredNotEmpty: function(args, _, validate) {
	Validation.required(args, _, function(status) {
	    if (status === true)
		Validation.notEmpty(args, _, validate)
	    else
		validate(status);
	});
    },
    keysAllowed: function(args, _, validate) {
	var self		= this;
	var data		= args[0];
	var keys		= args[1];
	var msg			= args[2] || "You are not permitted to give a value for '%s'";
	for (var k in data) {
	    if (keys.indexOf(k) === -1)
		return validate(msg.replace('%s', k));
	}
	validate(true);
    }
};
module.exports = Validation;
